{
    "patterns": [
        {
            "end": "^(?!(\\1\\s)|\\s*$)", 
            "name": "comment.unbuffered.block.pug", 
            "begin": "^(\\s*)//-", 
            "comment": "Unbuffered (pug-only) comments."
        }, 
        {
            "end": "^(?!(\\1\\s)|\\s*$)", 
            "name": "string.comment.buffered.block.pug", 
            "begin": "^(\\s*)//", 
            "patterns": [
                {
                    "comment": "Buffered comments inside buffered comments will generate invalid html.", 
                    "name": "string.comment.buffered.block.pug", 
                    "match": "^\\s*(//)(?!-)", 
                    "captures": {
                        "1": {
                            "name": "invalid.illegal.comment.comment.block.pug"
                        }
                    }
                }
            ], 
            "comment": "Buffered (html) comments."
        }, 
        {
            "end": "--\\s*>", 
            "name": "comment.unbuffered.block.pug", 
            "begin": "<!--", 
            "patterns": [
                {
                    "name": "invalid.illegal.comment.comment.block.pug", 
                    "match": "--"
                }
            ]
        }, 
        {
            "end": "^(?!(\\1\\s)|\\s*$)", 
            "name": "source.js", 
            "begin": "^(\\s*)-$", 
            "patterns": [
                {
                    "include": "source.js"
                }
            ], 
            "comment": "Unbuffered code block."
        }, 
        {
            "end": "^(?!(\\1\\s)|\\s*$)", 
            "begin": "^(\\s*)((:(?=.))|(:$))", 
            "beginCaptures": {
                "4": {
                    "name": "invalid.illegal.empty.generic.filter.pug"
                }
            }, 
            "patterns": [
                {
                    "end": "$", 
                    "name": "name.generic.filter.pug", 
                    "begin": "\\G(?<=:)(?=.)", 
                    "patterns": [
                        {
                            "name": "invalid.illegal.name.generic.filter.pug", 
                            "match": "\\G\\("
                        }, 
                        {
                            "name": "constant.language.name.generic.filter.pug", 
                            "match": "[\\w-]"
                        }, 
                        {
                            "include": "text.pug#tag_attributes"
                        }, 
                        {
                            "name": "invalid.illegal.name.generic.filter.pug", 
                            "match": "\\W"
                        }
                    ]
                }
            ], 
            "comment": "Generic Pug filter."
        }, 
        {
            "end": "^(?!(\\1\\s)|\\s*$)", 
            "begin": "^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\\\"(?:[^\\\\\"]|(?:(?<!\\\\)\\\\\\\\\"))*\\\\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\\\"(?:[^\\\\\"]|(?:(?<!\\\\)\\\\\\\\\"))*\\\\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))", 
            "beginCaptures": {
                "2": {
                    "name": "entity.other.attribute-name.id.pug"
                }, 
                "3": {
                    "name": "entity.other.attribute-name.class.pug"
                }, 
                "4": {
                    "name": "meta.tag.other entity.name.tag.pug"
                }
            }, 
            "patterns": [
                {
                    "include": "text.pug#tag_attributes"
                }, 
                {
                    "include": "#complete_tag"
                }, 
                {
                    "include": "source.vue#vue-interpolations"
                }, 
                {
                    "end": "$", 
                    "name": "text.block.pug", 
                    "begin": "^(?=.)", 
                    "patterns": [
                        {
                            "include": "#inline_pug"
                        }, 
                        {
                            "include": "source.vue#vue-interpolations"
                        }, 
                        {
                            "include": "text.pug#embedded_html"
                        }, 
                        {
                            "include": "text.pug#html_entity"
                        }, 
                        {
                            "include": "text.pug#interpolated_value"
                        }, 
                        {
                            "include": "text.pug#interpolated_error"
                        }
                    ]
                }
            ], 
            "comment": "Generated from dot_block_tag.py"
        }, 
        {
            "end": "$", 
            "begin": "^\\s*", 
            "patterns": [
                {
                    "include": "source.vue#vue-interpolations"
                }, 
                {
                    "include": "#inline_pug"
                }, 
                {
                    "include": "text.pug#blocks_and_includes"
                }, 
                {
                    "include": "text.pug#unbuffered_code"
                }, 
                {
                    "include": "text.pug#mixin_definition"
                }, 
                {
                    "include": "text.pug#mixin_call"
                }, 
                {
                    "include": "text.pug#flow_control"
                }, 
                {
                    "include": "text.pug#case_conds"
                }, 
                {
                    "end": "$", 
                    "name": "text.block.pipe.pug", 
                    "begin": "\\|", 
                    "patterns": [
                        {
                            "include": "#inline_pug"
                        }, 
                        {
                            "include": "source.vue#vue-interpolations"
                        }, 
                        {
                            "include": "text.pug#embedded_html"
                        }, 
                        {
                            "include": "text.pug#html_entity"
                        }, 
                        {
                            "include": "text.pug#interpolated_value"
                        }, 
                        {
                            "include": "text.pug#interpolated_error"
                        }
                    ], 
                    "comment": "Tag pipe text line."
                }, 
                {
                    "include": "text.pug#printed_expression"
                }, 
                {
                    "end": "$", 
                    "begin": "\\G(?=(#[^\\{\\w-])|[^\\w.#])", 
                    "patterns": [
                        {
                            "end": ">|$", 
                            "begin": "</?(?=[!#])", 
                            "patterns": [
                                {
                                    "include": "#inline_pug"
                                }, 
                                {
                                    "include": "source.vue#vue-interpolations"
                                }, 
                                {
                                    "include": "text.pug#interpolated_value"
                                }, 
                                {
                                    "include": "text.pug#interpolated_error"
                                }
                            ]
                        }, 
                        {
                            "include": "#inline_pug"
                        }, 
                        {
                            "include": "source.vue#vue-interpolations"
                        }, 
                        {
                            "include": "text.pug#embedded_html"
                        }, 
                        {
                            "include": "text.pug#html_entity"
                        }, 
                        {
                            "include": "text.pug#interpolated_value"
                        }, 
                        {
                            "include": "text.pug#interpolated_error"
                        }
                    ], 
                    "comment": "Line starting with characters incompatible with tag name/id/class is standalone text."
                }, 
                {
                    "include": "#complete_tag"
                }
            ], 
            "comment": "All constructs that generally span a single line starting with any number of white-spaces."
        }
    ], 
    "name": "Vue Pug Template", 
    "scopeName": "text.pug.vue-pug", 
    "repository": {
        "tag_text": {
            "end": "$", 
            "name": "text.pug.tagtextbla", 
            "begin": "(?=.)", 
            "patterns": [
                {
                    "include": "#inline_pug"
                }, 
                {
                    "include": "#embedded_html"
                }, 
                {
                    "include": "#html_entity"
                }, 
                {
                    "include": "#interpolated_value"
                }, 
                {
                    "include": "#interpolated_error"
                }, 
                {
                    "include": "source.vue#vue-interpolations"
                }
            ]
        }, 
        "complete_tag": {
            "end": "(\\.?$)|(?=:.)", 
            "begin": "(?=[\\w.#])|(:\\s*)", 
            "patterns": [
                {
                    "include": "text.pug#blocks_and_includes"
                }, 
                {
                    "include": "text.pug#unbuffered_code"
                }, 
                {
                    "include": "text.pug#mixin_call"
                }, 
                {
                    "include": "text.pug#flow_control"
                }, 
                {
                    "name": "invalid.illegal.name.tag.pug", 
                    "match": "(?<=:)\\w.*$"
                }, 
                {
                    "include": "text.pug#tag_name"
                }, 
                {
                    "include": "text.pug#tag_id"
                }, 
                {
                    "include": "text.pug#tag_classes"
                }, 
                {
                    "include": "text.pug#tag_attributes"
                }, 
                {
                    "include": "text.pug#tag_mixin_attributes"
                }, 
                {
                    "match": "((\\.)\\s+$)|((:)\\s*$)", 
                    "captures": {
                        "2": {
                            "name": "invalid.illegal.end.tag.pug"
                        }, 
                        "4": {
                            "name": "invalid.illegal.end.tag.pug"
                        }
                    }
                }, 
                {
                    "include": "text.pug#printed_expression"
                }, 
                {
                    "include": "#tag_text"
                }
            ]
        }
    }, 
    "fileTypes": [], 
    "uuid": "91f7f4e6-f4b7-48f1-81bd-986d3bddd3db"
}